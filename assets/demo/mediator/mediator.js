// Generated by CoffeeScript 1.4.0
(function() {
  var Player, mediator, scoreboard;

  Player = function(name) {
    this.points = 0;
    return this.name = name;
  };

  Player.prototype.play = function() {
    this.points++;
    return mediator.played();
  };

  scoreboard = {
    element: document.getElementById(&quot;results&quot;),
    update: function(score) {
      var diff, key, msg, value;
      msg = &apos;&apos;;
      for (key in score) {
        value = score[key];
        if (score.hasOwnProperty(key)) {
          msg = msg + (&quot;<span><strong>&quot; + key + &quot;</strong>:&quot; + value + &quot;</span>&quot;);
        }
      }
      this.element.innerHTML = msg;
      diff = score.Home - score.Guest;
      if (diff &gt; 15) {
        alert(&quot;Home Win!&quot;);
        return location.reload();
      } else if (diff &lt; -15) {
        alert(&quot;Guest Win!&quot;);
        return location.reload();
      } else {
        return document.getElementById(&apos;barGuest&apos;).style.width = 150 + (diff * 10) + &apos;px&apos;;
      }
    }
  };

  mediator = {
    players: {},
    setup: function() {
      var players;
      players = this.players;
      players.home = new Player(&apos;Home&apos;);
      return players.guest = new Player(&apos;Guest&apos;);
    },
    played: function() {
      var players, score;
      players = this.players;
      score = {
        Home: players.home.points,
        Guest: players.guest.points
      };
      return scoreboard.update(score);
    },
    keypress: function(e) {
      var keycode;
      e = e || window.event;
      keycode = e.which;
      if (keycode === 102) {
        mediator.players.home.play();
        return;
      }
      if (keycode === 106) {
        mediator.players.guest.play();
      }
    }
  };

  mediator.setup();

  window.onkeypress = mediator.keypress;

}).call(this);
